name: Cliff's Continue Configuration
version: "1.0.0"
schema: v1

# Language Models - Define your AI models here
models:
  # Primary chat model - Qwen2.5-Coder 1.5B for main agent tasks (memory-efficient alternative)
  - name: Qwen2.5-Coder 1.5B Main Agent
    provider: ollama
    model: qwen2.5-coder:1.5b
    roles:
      - chat
      - edit
      - apply
      - summarize
    defaultCompletionOptions:
      temperature: 0.7
      maxTokens: 4096
      contextLength: 8192
    chatOptions:
      baseSystemMessage: "You are an expert software engineer assistant. You have access to tools for file operations and terminal commands. When asked to run commands, use the available tools to execute them."
    systemMessageTemplate: "You are an expert software engineer assistant. You have access to tools for file operations and terminal commands. When asked to run commands, use the available tools to execute them.\n\nAvailable tools:\n{tools}"

  # Alternative larger model (requires 26GB+ RAM - testing enabled)
  - name: Qwen2.5-Coder 32B Main Agent
    provider: ollama
    model: qwen2.5-coder:32b-instruct
    roles:
      - chat
      - edit
      - apply
      - summarize
    defaultCompletionOptions:
      temperature: 0.7
      maxTokens: 8192
      contextLength: 32768
    chatOptions:
      baseSystemMessage: "You are an expert software engineer assistant. You have access to tools for file operations and terminal commands. When asked to run commands, use the available tools to execute them."
    systemMessageTemplate: "You are an expert software engineer assistant. You have access to tools for file operations and terminal commands. When asked to run commands, use the available tools to execute them.\n\nAvailable tools:\n{tools}"

  # Autocomplete model - Qwen2.5-Coder 1.5B for fast completions (memory-efficient)
  - name: Qwen2.5-Coder 1.5B Autocomplete
    provider: ollama
    model: qwen2.5-coder:1.5b
    roles:
      - autocomplete
    autocompleteOptions:
      debounceDelay: 200
      maxPromptTokens: 2048
      onlyMyCode: true
      useCache: true
      useRecentlyEdited: true
      useRecentlyOpened: true
      useImports: true
      modelTimeout: 3000
      maxSuffixPercentage: 0.25
      prefixPercentage: 0.85
    defaultCompletionOptions:
      temperature: 0.2
      contextLength: 32768
      maxTokens: 256
      stop:
        - "\n\n"
        - "```"
        - "def "
        - "class "
        - "function "

  # Backup OpenAI model - has native tool calling support
  - name: GPT-4o Backup
    provider: openai
    model: gpt-4o-mini
    roles:
      - chat
      - edit
      - apply
      - summarize
    defaultCompletionOptions:
      temperature: 0.7
      maxTokens: 4000
    # apiKey: your_openai_api_key_here

  # Test model for agent functionality - try downloading llama3.2:3b
  - name: Llama 3.2 Agent Test
    provider: ollama
    model: llama3.2:3b
    roles:
      - chat
      - edit
      - apply
    defaultCompletionOptions:
      temperature: 0.7
      maxTokens: 4000
      contextLength: 8192
    chatOptions:
      baseSystemMessage: "You are an expert software engineer assistant with access to tools for file operations and terminal commands."

# Context Providers - Sources of information for the AI
context:
  - provider: file # Current file context
  - provider: code # Code symbol definitions and references
  - provider: diff # Git diff context
  - provider: terminal # Terminal history
  - provider: problems # IDE error/warning messages
  - provider: folder # Directory structure
  - provider: codebase # Full codebase search
  - provider: os # Operating system commands and file operations

# Rules - Guidelines for the AI to follow
rules:
  - Always write clean, readable, and well-documented code
  - Use TypeScript interfaces and types appropriately
  - Follow established code patterns and conventions in the project
  - Include error handling in production code
  - Write descriptive commit messages and comments
  - name: TypeScript Standards
    rule: |
      For TypeScript projects:
      - Use strict type checking
      - Prefer interfaces over type aliases for object shapes
      - Use proper return type annotations for functions
      - Avoid 'any' types unless absolutely necessary
    globs: "**/*.{ts,tsx}"
  - name: Testing Guidelines
    rule: |
      When writing tests:
      - Use descriptive test names that explain the behavior
      - Follow AAA pattern: Arrange, Act, Assert
      - Mock external dependencies properly
      - Test both happy path and error cases
    globs: "**/*.{test,spec}.{ts,js,tsx,jsx}"

# UI Settings - Configure IDE integration behaviors
ui:
  codeBlockToolbarPosition: top
  displayRawMarkdown: false
  showChatScrollbar: true
  codeWrap: true

# Experimental Features - Enable advanced capabilities
experimental:
  # Enable automatic file writing without manual confirmation
  autoApplyFileEdits: true
  # Enable command execution capabilities
  allowCommandExecution: true
  # Use absolute file paths for better resolution
  useAbsoluteFilePaths: true
  # Improved model roles for better file operations
  modelRoles:
    inlineEdit: "Qwen2.5-Coder 1.5B Main Agent"
    applyCodeBlock: "Qwen2.5-Coder 1.5B Main Agent"

# Custom Prompts - Reusable prompt templates
prompts:
  - name: code-review
    description: Perform a thorough code review
    prompt: |
      Please review the highlighted code for:
      - Code quality and best practices
      - Potential bugs or security issues
      - Performance optimizations
      - Maintainability and readability
      - Test coverage suggestions

      Provide specific, actionable feedback.

  - name: explain
    description: Explain complex code in simple terms
    prompt: |
      Please explain this code in clear, simple terms:
      - What does it do?
      - How does it work?
      - Why might it be structured this way?
      - Are there any gotchas or important details?

  - name: optimize
    description: Suggest performance optimizations
    prompt: |
      Analyze this code for performance optimization opportunities:
      - Identify bottlenecks
      - Suggest algorithmic improvements
      - Recommend better data structures if applicable
      - Consider memory usage and efficiency

  - name: test-gen
    description: Generate comprehensive unit tests
    prompt: |
      Generate comprehensive unit tests for this code:
      - Cover all public methods/functions
      - Test edge cases and error conditions
      - Use appropriate mocking for dependencies
      - Follow testing best practices for the language/framework
      - Include descriptive test names and comments

# Documentation Sources - External docs to reference
docs:
  - name: TypeScript Handbook
    startUrl: https://www.typescriptlang.org/docs/
  - name: Node.js Documentation
    startUrl: https://nodejs.org/en/docs/
  - name: Continue.dev Docs
    startUrl: https://docs.continue.dev/intro
# MCP Servers - Model Context Protocol integrations (optional)
# mcpServers:
#   - name: File System Server
#     command: npx
#     args:
#       - "@modelcontextprotocol/server-filesystem"
#       - "/path/to/allowed/files"

# Development Data Collection (optional - for analytics)
# data:
#   - name: Local Development Analytics
#     destination: file:///Users/Cliff/.continue/dev_data
#     schema: 0.2.0
#     level: noCode  # Excludes sensitive code content
#     events:
#       - chatInteraction
#       - autocomplete
