name: 🔍 Code Quality & Validation

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch: # Allow manual trigger

jobs:
  validate:
    name: 🧪 Validate Configuration
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: 🔧 Install Dependencies
        run: npm ci

      - name: 🎨 Check Code Formatting
        run: npm run format:check

      - name: 🔍 Lint Code
        run: npm run lint

      - name: 🏗️ Build TypeScript
        run: npm run build

      - name: 📋 Validate YAML Syntax
        run: |
          # Install yq for YAML validation
          sudo snap install yq
          # Validate config.yaml syntax
          yq eval . config.yaml > /dev/null
          echo "✅ config.yaml is valid"

      - name: 📊 Check File Structure
        run: |
          echo "🔍 Checking required files..."

          # Check required files exist
          required_files=("config.yaml" "config.ts" "package.json" "tsconfig.json" "docs/README.md")

          for file in "${required_files[@]}"; do
            if [[ -f "$file" ]]; then
              echo "✅ $file exists"
            else
              echo "❌ $file is missing"
              exit 1
            fi
          done

          # Check config.yaml has required sections
          echo "🔍 Validating config.yaml structure..."

          if ! grep -q "^name:" config.yaml; then
            echo "❌ config.yaml missing 'name' field"
            exit 1
          fi

          if ! grep -q "^version:" config.yaml; then
            echo "❌ config.yaml missing 'version' field"
            exit 1
          fi

          if ! grep -q "^schema:" config.yaml; then
            echo "❌ config.yaml missing 'schema' field"
            exit 1
          fi

          echo "✅ config.yaml structure is valid"

      - name: 🧹 Check for Common Issues
        run: |
          echo "🔍 Checking for common configuration issues..."

          # Check for placeholder values
          if grep -q "your_api_key_here" config.yaml; then
            echo "⚠️ Warning: Found placeholder API keys in config.yaml"
          fi

          # Check for sensitive data
          if grep -i -E "(password|secret|key).*:" config.yaml | grep -v -E "(secrets\.|your_.*_key_here)" | grep -v "#"; then
            echo "❌ Potential sensitive data found in config.yaml"
            exit 1
          fi

          # Check TypeScript compilation target
          if ! grep -q '"target".*"ES' tsconfig.json; then
            echo "⚠️ Warning: Consider updating TypeScript target in tsconfig.json"
          fi

          echo "✅ No common issues detected"

      - name: 📝 Generate Configuration Report
        run: |
          echo "## 📊 Configuration Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Formatting**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Linting**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- **TypeScript Build**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- **YAML Syntax**: ✅ Valid" >> $GITHUB_STEP_SUMMARY
          echo "- **File Structure**: ✅ Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Configuration Details" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`yaml" >> $GITHUB_STEP_SUMMARY
          head -10 config.yaml >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🛡️ Run Security Audit
        run: |
          # Check for npm security vulnerabilities
          npm audit --audit-level high

      - name: 🔍 Check for Secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  documentation:
    name: 📚 Documentation Check
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📖 Check Documentation
        run: |
          echo "🔍 Checking documentation completeness..."

          # Check README exists and has content
          if [[ ! -f "docs/README.md" || ! -s "docs/README.md" ]]; then
            echo "❌ docs/README.md is missing or empty"
            exit 1
          fi

          # Check for basic sections in README
          if ! grep -qi "## " docs/README.md; then
            echo "❌ docs/README.md should have proper sections"
            exit 1
          fi

          # Check if SETUP.md exists
          if [[ -f "docs/SETUP.md" ]]; then
            echo "✅ docs/SETUP.md found"
          else
            echo "⚠️ Consider adding a docs/SETUP.md file"
          fi

          echo "✅ Documentation check completed"

      - name: 📝 Markdown Lint
        uses: DavidAnson/markdownlint-cli2-action@v16
        with:
          globs: "**/*.md"
          config: ".markdownlint.json"
          fix: false

  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [validate, security, documentation]
    if: always()

    steps:
      - name: 📊 Workflow Summary
        run: |
          echo "## 🎉 Continue Configuration Validation Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Validation**: ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan**: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY  
          echo "- **Documentation**: ${{ needs.documentation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.validate.result }}" == "success" && "${{ needs.security.result }}" == "success" && "${{ needs.documentation.result }}" == "success" ]]; then
            echo "🎉 **All checks passed!** Your Continue configuration is ready to use." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some checks failed.** Please review the errors above." >> $GITHUB_STEP_SUMMARY
          fi
