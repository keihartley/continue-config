name: 🚀 Build & Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release Type"
        required: true
        default: "minor"
        type: choice
        options:
          - major
          - minor
          - patch
      pre_release:
        description: "Pre-release (beta/alpha)"
        required: false
        default: false
        type: boolean
      release_notes:
        description: "Release Notes (optional)"
        required: false
        type: string

env:
  NODE_VERSION: "20"

jobs:
  # Build and validate before releasing
  build:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 🔧 Install Dependencies
        run: npm ci

      - name: 🎨 Run Format Check
        run: npm run format:check

      - name: 🔍 Run Linting
        run: npm run lint:check

      - name: 🧪 Validate Configuration
        run: npm run validate:config

      - name: 🏗️ Build Project
        run: npm run build

      - name: 📋 Calculate Version
        id: version
        run: |
          current_version=$(node -p "require('./package.json').version")
          echo "Current version: $current_version"

          # Calculate new version based on release type
          if [ "${{ github.event.inputs.release_type }}" = "major" ]; then
            new_version=$(npm version major --no-git-tag-version --no-commit-hooks)
          elif [ "${{ github.event.inputs.release_type }}" = "minor" ]; then
            new_version=$(npm version minor --no-git-tag-version --no-commit-hooks)
          else
            new_version=$(npm version patch --no-git-tag-version --no-commit-hooks)
          fi

          # Remove 'v' prefix from npm version output
          new_version=${new_version#v}

          echo "New version: $new_version"
          echo "version=$new_version" >> $GITHUB_OUTPUT
          echo "tag=v$new_version" >> $GITHUB_OUTPUT

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            out/
            package.json
            config.yaml
            config.ts
          retention-days: 30

  # Create release and tag
  release:
    name: 🎉 Create Release
    runs-on: ubuntu-latest
    needs: build
    if: success()

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 🔧 Install Dependencies
        run: npm ci

      - name: 📤 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: 🏷️ Update Version in Files
        run: |
          # Version was already updated in build step, just update config.yaml
          echo "Version from build step: ${{ needs.build.outputs.version }}"

          # Update version in config.yaml if it exists
          if [ -f "config.yaml" ]; then
            echo "Updating config.yaml version to ${{ needs.build.outputs.version }}"
            sed -i "s/^version:.*/version: \"${{ needs.build.outputs.version }}\"/" config.yaml
          else
            echo "config.yaml not found, skipping version update"
          fi

          # Verify the current version in package.json
          current_version=$(node -p "require('./package.json').version")
          echo "Current package.json version: $current_version"

      - name: 🔄 Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: 💾 Commit Version Changes
        run: |
          git add package.json config.yaml
          git commit -m "chore: bump version to ${{ needs.build.outputs.version }}" || echo "No changes to commit"

      - name: 🏷️ Create Git Tag
        run: |
          git tag -a ${{ needs.build.outputs.tag }} -m "Release ${{ needs.build.outputs.tag }}"

      - name: 📤 Push Changes and Tags
        run: |
          git push origin ${{ github.ref_name }}
          git push origin ${{ needs.build.outputs.tag }}

      - name: 📝 Generate Release Notes
        id: release_notes
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -n "$LAST_TAG" ]; then
            echo "Generating release notes since $LAST_TAG"
            COMMITS=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          else
            echo "No previous tag found, getting recent commits"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --max-count=10)
          fi

          # Create release notes with proper escaping
          cat << 'EOF' >> $GITHUB_OUTPUT
          release_notes<<RELEASE_NOTES_EOF
          ## 🚀 Release ${{ needs.build.outputs.tag }}

          ### 📋 Changes
          EOF
          echo "$COMMITS" >> $GITHUB_OUTPUT
          cat << 'EOF' >> $GITHUB_OUTPUT

          ### 🔧 Release Information
          - **Release Type**: ${{ github.event.inputs.release_type }} 
          - **Version**: ${{ needs.build.outputs.version }}
          - **Pre-release**: ${{ github.event.inputs.pre_release }}

          ### 📦 Artifacts
          This release includes:
          - ✅ Validated Continue.dev configuration
          - ✅ Compiled TypeScript output
          - ✅ All quality checks passed

          ${{ github.event.inputs.release_notes }}
          RELEASE_NOTES_EOF
          EOF

      - name: 🎉 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build.outputs.tag }}
          release_name: "Release ${{ needs.build.outputs.tag }}"
          body: ${{ steps.release_notes.outputs.release_notes }}
          draft: false
          prerelease: ${{ github.event.inputs.pre_release }}

      - name: 📊 Release Summary
        run: |
          echo "## 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ needs.build.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release**: ${{ github.event.inputs.pre_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.build.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Compare Changes](https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo 'HEAD~10')..${{ needs.build.outputs.tag }})" >> $GITHUB_STEP_SUMMARY

  # Optional: Deploy or notify after successful release
  post_release:
    name: 📢 Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [build, release]
    if: success()

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🎊 Success Notification
        run: |
          echo "🎉 Release ${{ needs.build.outputs.tag }} completed successfully!"
          echo "📦 Version: ${{ needs.build.outputs.version }}"
          echo "🏷️ Tag: ${{ needs.build.outputs.tag }}"
          echo "🔄 Release Type: ${{ github.event.inputs.release_type }}"
